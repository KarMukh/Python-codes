#Hurdles race:  Reeborg has entered a hurdle race. Make him run the course, following the path shown.
#https://reeborg.ca/reeborg.html?lang=en&mode=python&menu=worlds%2Fmenus%2Freeborg_intro_en.json&name=Hurdle%203&url=worlds%2Ftutorial_en%2Fhurdle3.json

#The position and number of hurdles changes each time this world is reloaded. 
#The functions move() and turn_left().
#The conditions front_is_clear() or wall_in_front(), at_goal(), and their negation.
#How to use a while loop and an if statement.
#Not only don't we know where the wall is going to be, we also don't know how many walls there will be.
#Your program should also be valid for worlds Hurdles 1 and Hurdles 2.
#A robot located at (x, y) = (1, 1) carries no objects.
#Goal to achieve: The final position of the robot must be (x, y) = (13, 1)

def turn_right():
    turn_left()
    turn_left()
    turn_left()

def step():
    #move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()

 
while not at_goal():
    if wall_in_front():
        step()
    else:
        move()

#Now our step function that we defined previously actually gets us to move forward by one step first, before we actually hurdle over this wall. 
#So in this case, if we try to do the same thing, then it's actually going to hit our robot into a wall.
#We have to modify our step function by removing this first move function (see above marked by #).
