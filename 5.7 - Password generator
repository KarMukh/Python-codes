#Password Generator Project
# We need to generate a random password which consists random 4 letters, random 2 numbers and random 2 symbols.

import random
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']

print("Welcome to the PyPassword Generator!")
nr_letters= int(input("How many letters would you like in your password?\n")) 
nr_symbols = int(input(f"How many symbols would you like?\n"))
nr_numbers = int(input(f"How many numbers would you like?\n"))

#Eazy Level - Order not randomised:
#e.g. 4 letter, 2 symbol, 2 number = JduE&!91


#Hard Level - Order of characters randomised:
#e.g. 4 letter, 2 symbol, 2 number = g^2jk8&P

# easy level password # easy level password # easy level password # easy level password # easy level password 


# codes are marked following #code## 
# comments are marked by single #

#code##password = ""

# in case nr_letters= 4

#code## for character in range(1, nr_letters + 1):

# So in this case, if the user wanted four letters, then it will be a range from one to four, but not including four.
# So it's actually from one to three, which has only three characters. In order to modify this, we have to add one to the end of our range.
# For every single number in that range from one to two to three to four, I'm going to generate them a random letter, and I'm gonna pick it out of this list of letters.
  
  # random_character = random.choice(letters) 
   #password += random_character
#print(password)
  #This is one way to solve this. # To do that I can either generate a random number and use it as the index or I can use the random.choice function. And inside this random.choice, we can pass a sequence which in our case is the letters list.
# Then it will look through this list of letters and it will give us a random item from that list.

#Another way to do the same but somehow in a short way is following:
  #code##password += random.choice(letters)

#Now we can repeat the same for symbols and numbers:

#code##for character in range(1, nr_symbols + 1):
  #code##password += random.choice(symbols)

#code##for character in range(1, nr_numbers + 1):
  #code##password += random.choice(numbers)
#code##print(password)

# So now when the user requests that they want four letters in their password, then we generate a range from one to five.
# And then for each of those positions, we generate a random letter in order to fill the password.
# And then we add on the required number of symbols and the required number of numbers. And finally, we print out the final password which fits our task.
# And this just limits the strength of your password. In order to tackle that we would have to tackle it at the hard level, which is how do you get a password that has all of these letters and numbers in a completely random order.

# In order to tackle the hard level, what we essentially need to do is instead of adding each of these letters, numbers and symbols into a string, we actually want to add it into a list.


# hard level password # hard level password # hard level password # hard level password # hard level password 

password_list = []

#So instead of using a password string, I'm going to create a list and to better describe it I'll change my variable name, the password list.

# in case nr_letters= 4
for character in range(1, nr_letters + 1):

# So now, instead of using password to add each of these letters and numbers and symbols, I'm going to be adding it to my list.
  
  password_list += random.choice(letters)

#Now we can repeat the same for symbols and numbers:

for character in range(1, nr_symbols + 1):
  password_list += random.choice(symbols)
#Now, to add things to a list, you can use the same syntax that you did with strings above, which is to add the new item into the list and to update the old list.
  #password_list += append(random.choice(symbols)) or we can use syntax which is append and both of these work.

  
for character in range(1, nr_numbers + 1):
  password_list += random.choice(numbers)
print(password_list)

# So now that we've got a list like this ['N', 'Q', 'C', 'V', '#', '&', '7', '2'], well, then we have to think about, well, how can we shuffle our list, how can we mess up the order of the items in our list?
# The way to do it is either using a for loop, or to simply use the shuffle function: random.shuffle(x). Shuffle function is a much simpler way because it allows us to update the existing list just by calling the shuffle function on it. On the other hand, for loop actually requires us to create a new list and we have to create a bunch of random numbers for the order, and then to reorder them using a four loop.
#  Let's print the password_list before, then use the random.shuffle and pass in the password_list. And then let's print the outcome of that shuffle, so let's print the password_list again::

random.shuffle(password_list)
print(password_list)

# So now you can see that we've got a version before: ['N', 'Q', 'C', 'V', '#', '&', '7', '2'] and a version after: ['N', 'Q', 'C', 'V', '#', '&', '7', '2']. As we can see after the shuffle they're now pretty much random. But these are still lists.
# So how can we turn it back into a string? We could simply use a for loop.

password = ""
for character in password_list:
  password += character

print(f"Your password is: {password}")

# Your password is: bh!D*66H
