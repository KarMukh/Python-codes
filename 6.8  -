#Step 1 

word_list = ["aardvark", "baboon", "camel"]

#TODO-1 - Randomly choose a word from the word_list and assign it to a variable called chosen_word.
import random
chosen_word = random.choice(word_list)

#TODO-2 - Ask the user to guess a letter and assign their answer to a variable called guess. Make guess lowercase.
guess = input("Guess a letter: ").lower()
#We're going to make this guess lower case and we do that by writing .lower

#TODO-3 - Check if the letter the user guessed (guess) is one of the leters in the chosen_word.
for letter in chosen_word:
    if letter == guess:
        print("Right")

#Now inside our for loop we can check to see if the letter that we're currently looking at is double equals to the letter that the user guessed and in this case, then that means its a match. 
    else:
        print("Wrong")

#################################################################
#Step 2 - initial version

import random
word_list = ["aardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)

#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#TODO-1: - Create an empty List called display.
#For each letter in the chosen_word, add a "_" to 'display'.
#So if the chosen_word was "apple", display should be ["_", "_", "_", "_", "_"] with 5 "_" representing each letter to guess.

guess = input("Guess a letter: ").lower()

#TODO-2: - Loop through each position in the chosen_word;
#If the letter at that position matches 'guess' then reveal that letter in the display at that position.
#e.g. If the user guessed "p" and the chosen word was "apple", then display should be ["_", "p", "p", "_", "_"].
for letter in chosen_word:
    if letter == guess:
        print("Right")
    else:
        print("Wrong")

#TODO-3: - Print 'display' and you should see the guessed letter in the correct position and every other letter replace with "_".
#Hint - Don't worry about getting the user to guess the next letter. We'll tackle that in step 3.






###########################################################################
#Step 2 - revised:


import random
word_list = ["aardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)

#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#TODO-1: - Create an empty List called display.
#For each letter in the chosen_word, add a "_" to 'display'.
#So if the chosen_word was "apple", display should be ["_", "_", "_", "_", "_"] with 5 "_" representing each letter to guess.

display = []
word_lenght = len(chosen_word)
### First we need to create an empty list let say called display.
###For each letter in the chosen word, we're going to add a underscore to this list.
####The simplest way to use for loop:

###for letter in chosen_word:
  ###display += "_"
  ####And for every single letter, we're just simply going to take our list, display, and add a item to it.
  ####And that item is going to be the string, underscore.

####Now notice how here we're not actually using this variable letter that gets created. 
####We're looping through every letter in the chosen word, but we're not doing anything with each of the letters. 
####So we can in fact just replace it with an underscore _:

###for _ in chosen_word:
  ###display += "_"


####So now if we go ahead and print out our display and see what we get:
#####Alternatively, we could have created this for loop with a range function as well.
#####Range function creates a range of numbers from zero up to a particular number that we specify.

for _ in range (len(chosen_word)):
  display += "_"

######So, as we can see in the line above, we could have also, instead of looping through the chosen word, use range and inside here, we could have put the length of the chosen word.
#####So then our range would be between zero and the length of the chosen word.

print (display)
######Result could be for example:
####Pssst, the solution is aardvark.
######['_', '_', '_', '_', '_', '_', '_', '_']

########So it doesn't actually matter in this case which version you went for, either this version of the for loop using the range function or the previous one which just looped through the list. It's your choice. They both worked the same.

guess = input("Guess a letter: ").lower()

#TODO-2: - Loop through each position in the chosen_word;
#If the letter at that position matches 'guess' then reveal that letter in the display at that position.
#e.g. If the user guessed "p" and the chosen word was "apple", then display should be ["_", "p", "p", "_", "_"].

####We actually have to change this for loop to one that uses the range function because we need to get hold of the position when the letter and the guess actually matched.

#So here I will mark for loop with ### to present the differance previous for loop and new one:

###for letter in chosen_word:
    ###if letter == guess:
        ###print("Right")
    ###else:
        ###print("Wrong")

for position in range(word_lenght):
  letter = chosen_word[position]
  if letter == guess:
      display[position] = letter
print(display)


#And then once we've guessed a letter, then it will replace that letter at the correct position in that display list.

###Result could be:
###Pssst, the solution is baboon.
###['_', '_', '_', '_', '_', '_']
###Guess a letter: a
###['_', 'a', '_', '_', '_', '_']


################
#Here we haven't enabled the repeatability yet.
#So we need our game to allow the user to guess the next letter and the next letter and keep going until they either die or they get to the solution.
#############

#TODO-3: - Print 'display' and you should see the guessed letter in the correct position and every other letter replace with "_".
#Hint - Don't worry about getting the user to guess the next letter. We'll tackle that in step 3.







###########################################################
#Step 3 - initial version


import random
word_list = ["aardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)
word_length = len(chosen_word)

#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#Create blanks
display = []
for _ in range(word_length):
    display += "_"

#TODO-1: - Use a while loop to let the user guess again. The loop should only stop once the user has guessed all the letters in the chosen_word and 'display' has no more blanks ("_"). Then you can tell the user they've won.

guess = input("Guess a letter: ").lower()

#Check guessed letter
for position in range(word_length):
    letter = chosen_word[position]
    print(f"Current position: {position}\n Current letter: {letter}\n Guessed letter: {guess}")
    if letter == guess:
        display[position] = letter

print(display)






##################################################################
#Step 3 - revised

import random
word_list = ["aardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)
word_length = len(chosen_word)

#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#Create blanks
display = []
for _ in range(word_length):
    display += "_"

#TODO-1: - Use a while loop to let the user guess again. The loop should only stop once the user has guessed all the letters in the chosen_word and 'display' has no more blanks ("_"). Then you can tell the user they've won.

###### First we can create a variable which we'll call end_of_game and set that to false to begin with because it's not yet the end of game. 


end_of_game = False

while not end_of_game:
    guess = input("Guess a letter: ").lower()

##### It means while it's not at the end of the game, then repeat this continuously.

    #Check guessed letter
    for position in range(word_length):
        letter = chosen_word[position]
        #print(f"Current position: {position}\n Current letter: {letter}\n Guessed letter: {guess}")
        if letter == guess:
            display[position] = letter

    print(display)


####When is it actually the end of the game? Well, it's when display has no more blanks.
    #Check if there are no more "_" left in 'display'. Then all letters have been guessed.
    ######The following basically allows us to check to see if a particular element exists inside a particular list.
    
    if "_" not in display:
        end_of_game = True
        print("You win.")
        
        



#############################################
#Step 4 - initial version

import random

stages = ['''
  +---+
  |   |
  O   |
 /|\  |
 / \  |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
 /    |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
  |   |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
      |
      |
      |
=========
''', '''
  +---+
  |   |
      |
      |
      |
      |
=========
''']

end_of_game = False
word_list = ["ardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)
word_length = len(chosen_word)

#TODO-1: - Create a variable called 'lives' to keep track of the number of lives left. 
#Set 'lives' to equal 6.

#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#Create blanks
display = []
for _ in range(word_length):
    display += "_"

while not end_of_game:
    guess = input("Guess a letter: ").lower()

    #Check guessed letter
    for position in range(word_length):
        letter = chosen_word[position]
        # print(f"Current position: {position}\n Current letter: {letter}\n Guessed letter: {guess}")
        if letter == guess:
            display[position] = letter

    #TODO-2: - If guess is not a letter in the chosen_word,
    #Then reduce 'lives' by 1. 
    #If lives goes down to 0 then the game should stop and it should print "You lose."

    #Join all the elements in the list and turn it into a String.
    print(f"{' '.join(display)}")

    #Check if user has got all letters.
    if "_" not in display:
        end_of_game = True
        print("You win.")

    #TODO-3: - print the ASCII art from 'stages' that corresponds to the current number of 'lives' the user has remaining.
    
    
    
    
    
    
###########################################################################
    #Step 4 - revised



import random

stages = ['''
  +---+
  |   |
  O   |
 /|\  |
 / \  |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
 /    |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
  |   |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
      |
      |
      |
=========
''', '''
  +---+
  |   |
      |
      |
      |
      |
=========
''']

end_of_game = False
word_list = ["ardvark", "baboon", "camel"]
chosen_word = random.choice(word_list)
word_length = len(chosen_word)

#TODO-1: - Create a variable called 'lives' to keep track of the number of lives left. 
#Set 'lives' to equal 6.
lives = 6

### Because our hungman contains 6 parts. See above.


#Testing code
print(f'Pssst, the solution is {chosen_word}.')

#Create blanks
display = []
for _ in range(word_length):
    display += "_"

while not end_of_game:
    guess = input("Guess a letter: ").lower()

    #Check guessed letter
    for position in range(word_length):
        letter = chosen_word[position]
       # print(f"Current position: {position}\n Current letter: {letter}\n Guessed letter: {guess}")
        if letter == guess:
            display[position] = letter

    #TODO-2: - If guess is not a letter in the chosen_word,
    #Then reduce 'lives' by 1. 
    #If lives goes down to 0 then the game should stop and it should print "You lose."
          
    if guess not in chosen_word:
        lives -= 1
        if lives == 0:
            end_of_game = True
            print("You lose.")
    ###### Here if the guessed letter does not exists in the chosen word then we're going to reduce the number of lives by one, so -= 1
    ###### Now, if at this stage after we've taken a life away and the number of lives goes down to zero, well then the game should stop and it should print "You lose."
    #### For this reason we add another if statement in here that checks whether if the number of lives is equals to, double equal to, zero. And if this is the case, then we should exit the game.
    ###### And we need to remember to exit the game we need to exit the while loop. And the while loop is dependent on the variable end_of_game which starts out being false. And when we want to exit the game, when it is in fact the end of the game, we switch it to true. So here, when the lives is equal to zero, we can say, end_of_game = True, and we're going to print "You lose."
          
    #Join all the elements in the list and turn it into a String.
    print(f"{' '.join(display)}")

    #Check if user has got all letters.
    if "_" not in display:
        end_of_game = True
        print("You win.")

    #TODO-3: - print the ASCII art from 'stages' that corresponds to the current number of 'lives' the user has remaining.
    print(stages[lives])

    ########## We have to print the ASCII art from the list called stages that corresponds to the current number of lives the user has remaining.
    ########### I've arranged each of these pictures in descending order of lives. So when you have a full six lives, the image at index six is the starting image.
    ################And when you have no lives, so the image at index zero is the one where the hangman is fully drawn.
    #####So all we have to do down here is to simply just the print the stages, and corresponding to the current number of lives.
