#Hurdles race
http://reeborg.ca/reeborg.html?lang=en&mode=python&menu=worlds%2Fmenus%2Freeborg_intro_en.json&name=Hurdle%204&url=worlds%2Ftutorial_en%2Fhurdle4.json
# Reeborg has entered a hurdle race. Make him run the course, following the path shown.
#  The position, the height and the number of hurdles changes each time this world is reloaded. 
# You should be able to write programs that are valid for worlds Around 4 and Hurdles 3, and ot combine them for this last hurdles race.
#Your program should also be valid for worlds Hurdles 1, Hurdles 2 et Hurdles 3.
#A robot located at (x, y) = (1, 1) carries no objects.
# Goal to achieve: The final position of the robot must be (x, y) = (13, 1)

#And in this particular version of the hurdle, the wall that the robot has to step over to now has a variable height.
#So the height of each of these hurdles is completely random, the position of the hurdles are random and also the number of hurdles is also going to be random.
#You can see that every single time that this regenerates, it comes up with a completely different set of hurdle profiles.
#And now we can't just use our step() function as in previous races because we don't know what the height will be each time.

def turn_right():
    turn_left()
    turn_left()
    turn_left()

def step():
    turn_left()
    while wall_on_right():
        move()
    turn_right()
    move()
    turn_right()
    while front_is_clear():
        move()
    turn_left()
    
while not at_goal():
    if wall_in_front():
        step()
    else:
        move()
        
# Anyway first works while not at_goal(): loop.
# To see it illustrated we need to go through the link above and check it there not just running the whole code but using step button.
