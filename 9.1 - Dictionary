programming_dictionary = {"Bug": "An error in a program that prevents the program from running as expected.", "Function": "A piece of code that you can easily call over and over again."}

#### The first thing we need to do to create a dictionary in Python is (what the syntax looks like): we have a set of curly braces and everything that's inside the curly brace is the content of our dictionary. The key goes first followed by a colon and then followed by the value (see above).
#### What if you wanted to have more than one entry in your dictionary? Well, you would separate each of the key value pairs using a comma, and then you can continue adding key and value pairs until you get to the end of your dictionary.

### When we create a dictionary that has more than one element we can start off the dictionary with the open curly brace at the top and then every subsequent entry is indented by one indent. And then at the very end of that entry, there's a comma and then we hit enter so that the next item goes onto the next line and finally, the last curly brace should go at the very beginning in line with the start of the dictionary (see below).
### And another thing that's quite nice to do is to cap off all entries in your dictionary or list with a comma. This means that if you needed to add more items into the dictionary you can simply just hit enter and continue typing the next thing.

programming_dictionary = {
  "Bug": "An error in a program that prevents the program from running as expected.", 
  "Function": "A piece of code that you can easily call over and over again.",
  123: "It is a integer number."
}

print(programming_dictionary)
### On the console we can see: {'Bug': 'An error in a program that prevents the program from running as expected.', 'Function': 'A piece of code that you can easily call over and over again.'}

### !!!!! Dictionaries have elements which are identified by their key. If we want to retrieve only a piece of information, for example, then all we have to do is tap into the dictionary and then add a set of square brackets and inside the square brackets, we're going to provide the key and when we print this, then we can see that it is going to give us the value:

print(programming_dictionary["Bug"])
### On the console we can see: An error in a program that prevents the program from running as expected.

### If we defined this dictionary without putting a string around each of these keys, then it's going to error out.
### And so when we have a key that is a string, when we're trying to retrieve the data from that key, we also have to make sure that you provide the key in its actual data type.

### So for example, if our key is just a number, say 123 then, of course, all we have to write in here is just 123 and it would know that this piece of data is what we wanted (see below, no "" in this case for key and for printing).

print(programming_dictionary[123])
### On the console we can see:It is a integer number.


### What if we wanted to add a piece of data such as that loop that we had earlier on, but we want to do it programmatically.
### All we have to do is to tap into the dictionary, which is called programming dictionary in our case and again, using square brackets, we define the key (in this case let's say loop). And then after a equal sign, we need to assign the value.

programming_dictionary["Loop"] = "The action of doing something over and over again."

### And when we print our dictionary we willl get the loop in it.
print(programming_dictionary)

### {'Bug': 'An error in a program that prevents the program from running as expected.', 'Function': 'A piece of code that you can easily call over and over again.', 123: 'It is a integer number.', 'Loop': 'The action of doing something over and over again.'}


### We can also create an empty dictionary by simply creating a set of curly braces with nothing inside. And then at a later stage, we can add to our dictionary by using this method that we saw here.

empty_dictionary = {}

### Even if we have our programming_dictionary with 3 items in it above, when we put here:
#   programming_dictionary = {}
### Then after printing our programming_dictionary: print(programming_dictionary) we will get empty curly brackets {} as a result.
### That can be really useful if we wanted to clear out a user's progress or for example, if a game restarts, then all the scores and stats will probably have to be wiped empty.

### We can also use this to edit an item in a dictionary:

programming_dictionary["Bug"] = "A moth in your computer."

### After this if we go and print the programming dictionary once more, then we can see that the definition for our bug has now just been changed.

### And the last one: to loop through a dictionary we can also use for loop

for key in programming_dictionary:
  print(key)
  print(programming_dictionary[key])

#### So now when we hit run, we can see it's giving us first the key from this line and then secondly the value based on this line. See below:

# Bug
  ### This is for print(key)
# A moth in your computer.
  ### This is for print(programming_dictionary[key]). And as we can see it takes new value we gave to our key on the line 54.
#### And same is for others.
# Function
# A piece of code that you can easily call over and over again.
# 123
# It is a integer number.
# Loop
# The action of doing something over and over again.

##############################################

### dictionary samples: also see above

empty_dictionary = {}

dictionary_1 = {key: "value"}
### value as a string

dictionary_2 = {key: 12}
### value as a number

dictionary_3 = {key1: "value", key2: 12}
or
dictionary_3 = {
  key: "value", 
  key: 12
}


dictionary_4 = {key1: [list], key2: {dictionary_3}}
### Here we can see as a value can be lists or dictionaries.
###Notice how this is a list and a dictionary nested inside another dictionary.
### In this case we've got a list as the value for key, this first one, and we've got a dictionary as the value for key2. 


capitals = {
  "France": "Paris",
  "Germany": "Berlin",
}

##### We could also just nest a list in a list. So you could have a list which is A and then B, and then the third item just happens to be another list which has C and D.
#### This is perfectly valid Python code but it's not quite as useful as nesting a list in a dictionary or a dictionary in a dictionary, because the way that data is structured.

["A", "B", ["C"   , "D"]]


##Python Dictionaries

programming_dictionary = {
  "Bug": "An error in a program that prevents the program from running as expected.", 
  "Function": "A piece of code that you can easily call over and over again.",
}

#Retrieving items from dictionary.
# print(programming_dictionary["Function"])

#Adding new items to dictionary.
programming_dictionary["Loop"] = "The action of doing something over and over again."

#Create an empty dictionary.
empty_dictionary = {}

#Wipe an existing dictionary
# programming_dictionary = {}
# print(programming_dictionary)

#Edit an item in a dictionary
programming_dictionary["Bug"] = "A moth in your computer."
# print(programming_dictionary)

#Loop through a dictionary
# for key in programming_dictionary:
#   print(key)
#   print(programming_dictionary[key])

#######################################

#Nesting 
capitals = {
  "France": "Paris",
  "Germany": "Berlin",
}

#Nesting a List in a Dictionary

travel_log = {
  "France": ["Paris", "Lille", "Dijon"],
  "Germany": ["Berlin", "Hamburg", "Stuttgart"],
}

#Nesting Dictionary in a Dictionary!!!!!!!!!!!!!!!!!!

####### And instead of just storing the cities that I visited in each country, what if I wanted to also keep track of how many visits I've made to that country?
######## Or what if I wanted to actually label what this piece of data is?

### Here's the solution. By nesting a dictionary we can label the Paris, Lille and Dijon lists as cities visited.
### All I need to do is create the string, "cities_visited" and add a colon after it. 
#### !!!! But there's one more step. We have to add a pair of curly braces so that France is associated with a single value, namely our nested dictionary.
### Now that we have a dictionary of the travel log, all the countries I've been to, and each country has a value that is a dictionary in itself and it can store multiple pieces of data including the cities I've visited in that country as well as things such as the total number of visits, which in this case would have a string as the key and a number of as the value. 

travel_log = {
  "France": {"cities_visited": ["Paris", "Lille", "Dijon"], "total_visits": 12},
  "Germany": {"cities_visited": ["Berlin", "Hamburg", "Stuttgart"], "total_visits": 5},
}

### And so now our data structure is such that we've got a list nested inside a dictionary, which is in itself nested in another dictionary.


#Nesting Dictionaries in Lists

### ### Now that we've seen nesting lists inside dictionaries, dictionaries inside dictionaries.
### One more thing is nesting a dictionary inside a list.
### So we could basically have multiple dictionaries inside a single list. So remember that lists are ordered and they're accessed by the positions inside the list.
### Whereas inside a dictionary, the items are accessed by their keys like this France or Germany.

### But once we've got more and more key-value pairs in the dictionary, it's usually a good idea to go ahead and separate out each of the entries (dictionaries).
  

travel_log = [
{
  "country": "France", 
  "cities_visited": ["Paris", "Lille", "Dijon"], 
  "total_visits": 12,
},
{
  "country": "Germany",
  "cities_visited": ["Berlin", "Hamburg", "Stuttgart"],
  "total_visits": 5,
},
]

#### Now it's a little bit easier to see that we have a list which contains two items, and each item is a dictionary. Each dictionary has three key-value pairs and they all contain different types of data. The first one has a value which is a string, the second one holds a list and the third one holds a number. But what can't change is you still need a key and a value separated by a colon.
